extends Node2D

# The last direction the player faced when looking with the Controller. Defaulting to "DOWN"
var last_look : Vector2 = Vector2.DOWN
# TODO: Handle signal of controller connection (joy_connection_changed(device: int, connected: bool)) in a global environment, so there is no computational load increase until a Controller is plugged in.

## This function get the player walk direction/vector. This is generated by wasd/arrow keys/ right stick
## it returns the vector normalized
func get_move_vector():
	var input_vector = Vector2.ZERO
	if Input.is_action_pressed("up"):
		input_vector.y -= 1
		last_look = Vector2.UP
	if Input.is_action_pressed("down"):
		input_vector.y += 1
		last_look = Vector2.DOWN
	if Input.is_action_pressed("left"):
		input_vector.x -= 1
		last_look = Vector2.LEFT
	if Input.is_action_pressed("right"):
		input_vector.x += 1
		last_look = Vector2.RIGHT
	input_vector = input_vector.normalized()
	return input_vector
	
#func get_attack_input():
	#if Input.is_action_just_pressed("attack")

## This function get the player direction/look vector. This is generated by either the mouse position and the player position or the controller right stick
## it returns the vector normalized
func get_look_vector(player_position):
	# not sure how expensive it is to get viewport ( not sure if i call this everytime or store the viewport ) 
	# NOTE: Jack learned about the Input function from https://stackoverflow.com/questions/46071451/godot-check-if-controller-connected-or-not, and read Godot's documentation for the updated function.
	if(Input.get_connected_joypads().size() == 0):
		var mouse_position = get_global_mouse_position()
		return (mouse_position - player_position).normalized() 
	else:
		# Coding pattern learned from Godot's documentation: https://docs.godotengine.org/en/stable/tutorials/inputs/controllers_gamepads_joysticks.html
		var look_dir = Input.get_vector("look_left","look_right","look_up","look_down")
		look_dir = Vector2(Input.get_action_strength("look_right") - Input.get_action_strength("look_left"), Input.get_action_strength("look_down")-Input.get_action_strength("look_up")).limit_length(1.0)
		if(look_dir != Vector2.ZERO):
			last_look = look_dir
			return look_dir
		else:
			return last_look
